// Code generated by MockGen. DO NOT EDIT.
// Source: employee.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeModel is a mock of EmployeeModel interface.
type MockEmployeeModel struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeModelMockRecorder
}

// MockEmployeeModelMockRecorder is the mock recorder for MockEmployeeModel.
type MockEmployeeModelMockRecorder struct {
	mock *MockEmployeeModel
}

// NewMockEmployeeModel creates a new mock instance.
func NewMockEmployeeModel(ctrl *gomock.Controller) *MockEmployeeModel {
	mock := &MockEmployeeModel{ctrl: ctrl}
	mock.recorder = &MockEmployeeModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeModel) EXPECT() *MockEmployeeModelMockRecorder {
	return m.recorder
}

// DepartmentID mocks base method.
func (m *MockEmployeeModel) DepartmentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepartmentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepartmentID indicates an expected call of DepartmentID.
func (mr *MockEmployeeModelMockRecorder) DepartmentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepartmentID", reflect.TypeOf((*MockEmployeeModel)(nil).DepartmentID))
}

// ID mocks base method.
func (m *MockEmployeeModel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEmployeeModelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEmployeeModel)(nil).ID))
}

// Name mocks base method.
func (m *MockEmployeeModel) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEmployeeModelMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEmployeeModel)(nil).Name))
}

// MockEmployeeWithDepartmentModel is a mock of EmployeeWithDepartmentModel interface.
type MockEmployeeWithDepartmentModel struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeWithDepartmentModelMockRecorder
}

// MockEmployeeWithDepartmentModelMockRecorder is the mock recorder for MockEmployeeWithDepartmentModel.
type MockEmployeeWithDepartmentModelMockRecorder struct {
	mock *MockEmployeeWithDepartmentModel
}

// NewMockEmployeeWithDepartmentModel creates a new mock instance.
func NewMockEmployeeWithDepartmentModel(ctrl *gomock.Controller) *MockEmployeeWithDepartmentModel {
	mock := &MockEmployeeWithDepartmentModel{ctrl: ctrl}
	mock.recorder = &MockEmployeeWithDepartmentModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeWithDepartmentModel) EXPECT() *MockEmployeeWithDepartmentModelMockRecorder {
	return m.recorder
}

// DepartmentID mocks base method.
func (m *MockEmployeeWithDepartmentModel) DepartmentID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepartmentID")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepartmentID indicates an expected call of DepartmentID.
func (mr *MockEmployeeWithDepartmentModelMockRecorder) DepartmentID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepartmentID", reflect.TypeOf((*MockEmployeeWithDepartmentModel)(nil).DepartmentID))
}

// DepartmentName mocks base method.
func (m *MockEmployeeWithDepartmentModel) DepartmentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepartmentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepartmentName indicates an expected call of DepartmentName.
func (mr *MockEmployeeWithDepartmentModelMockRecorder) DepartmentName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepartmentName", reflect.TypeOf((*MockEmployeeWithDepartmentModel)(nil).DepartmentName))
}

// ID mocks base method.
func (m *MockEmployeeWithDepartmentModel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEmployeeWithDepartmentModelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEmployeeWithDepartmentModel)(nil).ID))
}

// Name mocks base method.
func (m *MockEmployeeWithDepartmentModel) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEmployeeWithDepartmentModelMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEmployeeWithDepartmentModel)(nil).Name))
}

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// GetEmployee mocks base method.
func (m *MockEmployeeRepository) GetEmployee(ctx context.Context, id string) (EmployeeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", ctx, id)
	ret0, _ := ret[0].(EmployeeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployee(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployee), ctx, id)
}

// GetEmployees mocks base method.
func (m *MockEmployeeRepository) GetEmployees(ctx context.Context, ids []string) ([]EmployeeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployees", ctx, ids)
	ret0, _ := ret[0].([]EmployeeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployees indicates an expected call of GetEmployees.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployees(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployees", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployees), ctx, ids)
}

// GetEmployeesWithDepartment mocks base method.
func (m *MockEmployeeRepository) GetEmployeesWithDepartment(ctx context.Context, ids []string) ([]EmployeeWithDepartmentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeesWithDepartment", ctx, ids)
	ret0, _ := ret[0].([]EmployeeWithDepartmentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesWithDepartment indicates an expected call of GetEmployeesWithDepartment.
func (mr *MockEmployeeRepositoryMockRecorder) GetEmployeesWithDepartment(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesWithDepartment", reflect.TypeOf((*MockEmployeeRepository)(nil).GetEmployeesWithDepartment), ctx, ids)
}
