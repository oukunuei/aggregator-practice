// Code generated by MockGen. DO NOT EDIT.
// Source: department.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDepartmentModel is a mock of DepartmentModel interface.
type MockDepartmentModel struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentModelMockRecorder
}

// MockDepartmentModelMockRecorder is the mock recorder for MockDepartmentModel.
type MockDepartmentModelMockRecorder struct {
	mock *MockDepartmentModel
}

// NewMockDepartmentModel creates a new mock instance.
func NewMockDepartmentModel(ctrl *gomock.Controller) *MockDepartmentModel {
	mock := &MockDepartmentModel{ctrl: ctrl}
	mock.recorder = &MockDepartmentModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentModel) EXPECT() *MockDepartmentModelMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockDepartmentModel) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDepartmentModelMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDepartmentModel)(nil).ID))
}

// Name mocks base method.
func (m *MockDepartmentModel) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDepartmentModelMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDepartmentModel)(nil).Name))
}

// MockDepartmentRepository is a mock of DepartmentRepository interface.
type MockDepartmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentRepositoryMockRecorder
}

// MockDepartmentRepositoryMockRecorder is the mock recorder for MockDepartmentRepository.
type MockDepartmentRepositoryMockRecorder struct {
	mock *MockDepartmentRepository
}

// NewMockDepartmentRepository creates a new mock instance.
func NewMockDepartmentRepository(ctrl *gomock.Controller) *MockDepartmentRepository {
	mock := &MockDepartmentRepository{ctrl: ctrl}
	mock.recorder = &MockDepartmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartmentRepository) EXPECT() *MockDepartmentRepositoryMockRecorder {
	return m.recorder
}

// GetDepartment mocks base method.
func (m *MockDepartmentRepository) GetDepartment(ctx context.Context, id string) (DepartmentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", ctx, id)
	ret0, _ := ret[0].(DepartmentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment.
func (mr *MockDepartmentRepositoryMockRecorder) GetDepartment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockDepartmentRepository)(nil).GetDepartment), ctx, id)
}

// GetDepartments mocks base method.
func (m *MockDepartmentRepository) GetDepartments(ctx context.Context, ids []string) ([]DepartmentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartments", ctx, ids)
	ret0, _ := ret[0].([]DepartmentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartments indicates an expected call of GetDepartments.
func (mr *MockDepartmentRepositoryMockRecorder) GetDepartments(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartments", reflect.TypeOf((*MockDepartmentRepository)(nil).GetDepartments), ctx, ids)
}
